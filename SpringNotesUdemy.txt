Why Spring?

    -   Early version of EJB(v1 and v2) were extremely complex !!!
    -   Multiple deployment descriptors.
    -   Multiple Interfaces.
    -   Poor Performance of Entity Beans.

What's New in Spring 5?
    -   Updated minimum java requirements for Java 8 or higher
    -   Deprecated Legacy integration for: Tiles, Velocity, Guava etc
    -   Updated Spring MVC to use new versions of Servlet API 4.0
    -   Added new reactive programming framework: Spring WebFlux.

Goals of Spring
    -   LightWeight development with Java POJOs (Plain Old Java Objects)
    -   Dependency injection to promote loose coupling
    -   Declarative programming with Aspect-Oriented-Programming(AOP)
    -   Minimize boilerplate Java code

Spring Core Container
    -   It manages how beans are created
    -   It has four parts:
            1.  Beans   -   (BeanFactory)It is responsbile for creating beans. Read Config files, setting properties etc
            2.  Core    -   creating beans and making those beans available
            3.  SpEl    -   Spring Expression Language, used within the config file to refer to other beans
            4.  Context -   It is responsible to hold the beans in the memory

Spring Infrastructure
    -   Aop             -   It allows to create applciation wide services like logging, security, transaction, instrumentation.
                            No need to modify your code, just add a config or annotation.
    -   Aspects         -
    -   Instrumentation -   Creating Java agents to remotely monitor your app with JMX (Java Management Extension)
    -   Messaging       -

Data Access Layer
    -   JDBC            -   JDBC helper classes, helps to reduce the JDBC code by 50 %
    -   ORM             -   Object to Relational Mapping, Integration with hibernate and JPA
    -   Transactions    -   Supporting Transactions on methods, database calls.
    -   OXM             -
    -   JMS             -   Java Message Service, used to send message to the message queue asynchronously

Home for Spring MVC framework(Web Layer)
    -   Servlet         -
    -   WebSocket       -
    -   Web             -
    -   Portlet         -

Test Layer
    -   Unit        -
    -   Integration -
    -   Mock        -

What are Spring "Projects" ?
    -   Additional Spring modules built-on top of the core Spring Framework
    -   Only use what you need,
    -   Spring Cloud, Spring Data
    -   Spring Batch, Spring Security
    -   Spring for Android, Spring Web Flow
    -   Spring Web Services, Spring LDAP

Installing tomcat in linux:
    go to tomcat.apache.org and download the latest tar.gz format file
    sudo -s
    cd /usr/local
    mv apache-tomcat-9.0xxx tomcat9
    vim ~/.bashrc
    write these three lines and save
    export CATALINA_HOME="/usr/local/tomcat9"
    alias tomcatstart="/usr/local/tomcat9/bin/startup.sh"
    alias tomcatstop="/usr/local/tomcat9/bin/shutdown.sh"
    source ~/.bashrc
    sudo chmod -R 777 /usr/local/tomcat9  => give permission to user

To start and stop:
sudo -s
tomcatstart (to start the server)
tomcatstop  (to stop the server)

Integrating tomcat9 to eclipse:
    -   Open eclipse and go to servers tab
    -   Select Apache and go to Apache version 9
    -   select the directory as /usr/local/tomcat9

Installing Spring jar files
    -   go to www.luv2code.com/downloadspring
    -   go to latest spring version and download dist.zip file
    -   extract the zip file
    -   goto the lib folder and copy all the jar files
    -   create a java project such as "spring-demo-one"
    -   create a folder named as "lib" and paste all the jar files
    -   now right click on project "spring-demo-one" and goto properties
    -   goto java Build Path -> libraries and then click add jars
    -   Select all the jars and click add and then apply and close

Inversion of Control
    -   Outsource to an object factory
    -   The process of outsourcing the construction and management of objects.
    -   Spring Container Primary Functions
        -   Create and manage objects(Inversion of Control)
        -   Inject object's dependencies(Dependency injection)
    -   Configuring Spring Container
        -   XML Configuration(legacy, but most legacy app still use this)
        -   Java Annotations(modern)
        -   Java Source Code(modern)
    -   Spring Development Process
        -   Configuring your Spring Beans
            -   Using applicationContext.xml file to add the beans
        -   Create a spring Container
            -   Spring Container is generally known as ApplicationContext
                -   Specialized implementations
                    -   ClassPathXmlApplicationContext
                    -   AnnotationConfigApplicationContext
                    -   GenericWebApplicationContext
                    -   others
        -   Retrieve beans from Spring Container
            -   Using ClassPathXmlApplicationContext to create a spring container
            -   retrieving bean from the spring container

What is Spring Bean
    -   A "Spring Bean" is simply a Java Object.
    -   When Java objects are created by the Spring Container, then
        Spring refers to them as "Spring Beans".
    -   Spring beans are created from normal Java classes just like java objects


What is dependency injection
    -   Dependency injection is a pattern through which we implement IoC,
        where the control being inverted is setting of object's dependencies.
    -   Dependecy injection is the outsourcing and injection of the objects.
    -   Rather than manually creating the objects and it's dependencies
        Spring Framework will do this for us.
    -   Injection Types in Spring that are most commonly used.
        -   Constructor Types
        -   Setter Injection
    -   Injection of literal values can also be done
    -   Injection using properties file,

Bean Scopes
    -   What is Singleton ?
        -   Spring Container only creates only one instance by default
        -   It is cached in memory
        -   All requests to the bean will return the SHARED reference
            to the SAME bean
        -   You can explicitly specify bean scope using the scope keyword in the xml
        -   Scope           Description
            singleton       Create single shared instance of the bean. Default scope.
            prototype       Creates a new bean instance for each container request.
            request         Scoped to an HTTP web request. Only used for web apps.
            session         Scoped to an HTTP web session. Only used for web apps.
            global-session  Scoped to a global HTTP web session. Only used for web apps.

Bean LifeCycle
        -   Container Started ->
                Bean Instantiated ->
                    Dependencies Injected ->
                        Internal Spring Processing ->
                            Your Custom init method ->
                                Bean is Ready to Use/ Container is Shutdown ->
                                    Your Custom Destroy method ->
                                        STOP
        -   You can add custom code during bean initialisation
            -   Calling custom business logic method.
            -  Setting up handles to resources.
        -   You can add custom code during bean destruction.
            -   Calling custom business logic method.
            -   Setting up handles to resources.
        -   Defining init and destroy methods
            -   Access Modifier
                -   The method can have any access modifier(private, public or protected).
            -   Return Type
                -   The method can have any return type. However, void is the most commonly used.
                    If you give the return type just note that you won't be able to capture the
                    return value.
            -   Method name
                -   The method can have any method name.
            -   Arguments
                -   The method cannot accept any arguments. The method should be no-arg.
        -   Special Note about Destroy LifeCycle and Prototype Scope
            -   For "prototype" scoped beans, Spring does not call the destroy method
            -   In contrast to other scopes, Spring does not manage the complete lifecyle
                of a prototype bean
                -   the container instantiates, configures and otherwise assembles a prototype object
                    then it hands this to the client, with no further record of the prototype instance
                -   In the case of prototypes, configured destruction lifecycle callbacks are not called.
                    (The client code must cleanup prototype-scoped objects and release expensive
                     resources that the prototype beans are holding).

Spring Configuration using Java Annotations
    -   What are Java Annotations?
        -   Special labels/markers added to Java classes
        -   Provide meta-data about the class
        -   Processed at compile time or run-time for special processing
    -   Why Spring Configuration with Annotations?
        -   XML configuration can be verbose.
        -   Configure your Spring beans with Annotations.
        -   Annotations minimizes the XML configuration.
    -   What happens when you add Annotation to your class?
        -   Spring will scan your Java classes for special annotations
        -   Automatically register the beans in the Spring Container
    -   Using @Component to get the spring bean goto (TennisCoach.java class for example)
    -   Spring also supports default bean Id
        -   Default bean id: the class name, make first letter-lower case
            ClassName       Default Bean Id
            TennisCoach     tennisCoach

Spring Dependency Injection with Autowiring and Annotations
    -   What is Spring AutoWiring ?
        -   For dependency injection, Spring can use auto wiring
        -   Spring will look for a class that matches a property
            matches by type: class or interface
        -   Spring will inject it automatically.. hence it is autowired
    -   Autowiring Injection Types
        -   Constructor injection
        -   Setter injection
        -   Field Injection
    -   Constructor Injection
        -   We can use @Autowired on the constructor to inject the dependencies
        -   But what happens when we have multiple Implementations of the injected dependency?
            -   Spring has a special support to handle this case. Use the @Qualifier annotation.
        -   If you comment the @Autowired in the constructor injection, the code will still work
            -   It is a new feature of Spring framework 4.3, an @Autowired annotation on such
                a constructor is no longer necessary if the target bean defines only
                one constructor to begin with.
            -   However, if several constructors are available, atleast one must be annotated
                to teach the container which one to use.
    -   Setter Injection
        -   Inject dependencies by setting method on your class directly
        -   In injecting dependency using the setter methods just use the @Autowired annotation
        -   Setter injection using @Autowired does not depend on method name, "Use ANY method name"
    -   Field Injection
        -   Inject dependencies by setting field values on your class directly(even private fields)
        -   It is accomplished by using java reflection
        -   @Autowired is applied directly to the field
        -   No need to add setter methods
    -   Default Bean names Special Case
        -   The special case is when both the first and second characters of the class name are
            upper case, then the name is not converted.
            Eg. RESTFortuneService -> RESTFortuneService
            No conversion since the first two characters are upper case.
    -   Using Qualifiers with Constructors
        -   Eg:
            @Autowired
            public TennisCoach(@Qualifier("randomFortuneService")
                    FortuneService fortuneService){
                this.fortuneService = fortuneService;
            }
    -   Using literal values from properties file using annotations
        -   @Value("${value}") can be used to provide initial values to the
            variables using properties file
    -   Scope of Beans using Annotations
        -   By default the scope of the bean is singleton
        -   You can add the type of the scope by using @Scope("prototype")
    -   Bean Lifecycle methods using Annotations i.e init and destroy methods
        -   @PostConstruct
            -   Place where you want to initialize code
        -   @PreDestroy
            -   Place where you want to add your cleanup code
        -   Note about @PostConstruct and @PreDestroy methods
            -   Access Modifier
                -   The method can have any access modifier(private, public or protected).
            -   Return Type
                -   The method can have any return type. However, void is the most commonly used.
                    If you give the return type just note that you won't be able to capture the
                    return value.
            -   Method name
                -   The method can have any method name.
            -   Arguments
                -   The method cannot accept any arguments. The method should be no-arg.
        -   Special Note about Destroy LifeCycle and Prototype Scope
            -   For "prototype" scoped beans, Spring does not call the @PreDestroy method
            -   In contrast to other scopes, Spring does not manage the complete lifecyle
                of a prototype bean
                -   the container instantiates, configures and otherwise assembles a prototype object
                    then it hands this to the client, with no further record of the prototype instance
                -   In the case of prototypes, configured destruction lifecycle callbacks are not called.
                    (The client code must cleanup prototype-scoped objects and release expensive
                     resources that the prototype beans are holding).

3 Ways to configure Spring Container
    -   Full XML Configuration
    -   XML Component Scan
    -   Java Configuration Class

Spring Container using Java Configuration Class
    -   You write Java source code to configure Spring Container
    -   There is no use of xml in this type of Configuration

    -   1st method for using Java to configure Spring Container
        -   In the Configuration java class we annotate it with @Configuration Annotation
        -   Also we use  @ComponentScan("package name")
        -   @ComponentScan will scan for @Component for creating beans as discussed above.
        -   Also to retrieve this class we use AnnotationConfigApplicationContext


    -   2nd method for using Java to configure Spring Container
        -   When using @Bean then we don't require the @ComponentScan because
            we are creating our bean manually
        -   Also we don't need to add @Component to those class for which we need to
            create bean because we are creating our bean manually.
        -   Also to retrieve this class we use AnnotationConfigApplicationContext

    -   How @Bean works ?
        -   The @Bean annotation tells Spring that we are creating a bean component
            manually. We didn't specify the scope so the scope is singleton.

            public Coach swimCoach(){

            }

        -   This specifies that the bean will be bean id of "swimCoach".
        -   The method name determines bean id. The return type is Coach interface.
            This can help spring find any dependencies that implement the Coach
            interface.
        -   The @Bean annotation will intercept any requests for "swimCoach" bean.
            Since we didn't specify a scope, the bean scope is singleton. As a result
            it will give the same instance of the bean for any requests.

            SwimCoach mySwimCoach = new SwimCoach();

        -   This code will create new instance of SwimCoach.

            return mySwimCoach.

        -   This code returns the new instance of the swimCoach.

        -   Now just step back and look at the method in it's entirety

            @Bean
            public Coach swimCoach(){
                SwimCoach mySwimCoach = new SwimCoach();
                return mySwimCoach;
            }

        -   It is important to note that this method has @Bean annotation.
            This annotation will intercept All calls to the method "swimCoach()".
            Since no concepts is specified, it defaults to singleton.

        -   Any calls for sadFortuneService, the @Bean annotation intercepts
            the call and checks to see if an instance has been created. First
            time through, no instance is created so the code executes as
            desired. For subsequent calls, the singleton has been created
            so @Bean will immediately return with the singleton instance.

        -   Now to the main code based on the question.

            return new SwimCoach(sadFortuneService())

        -   This code creates instance of SwimCoach. Note the call to the
            method sadFortuneService(). We are calling the annotated method
            above. The @Bean will intercept and return a singleton instance
            of sadFortuneService. The sadFortuneService is then injected into
            the swim coach instance.

        -   This is effectively dependency injection. It is accomplished using
            all Java configuration(no xml).

Adding values using Properties file
    -   So @Value("${value}") is used to add the value from the properties file
    -   Also use @PropertySource("classpath:sports.properties") in the Java Config Class
        to load the properties

What is Spring MVC ?
    -   Framework for building web applications in Java
    -   Based on Model-View Controller design pattern
    -   Leverages features of the Core Spring Framework(DI, IoC)
    -
        WebBrowser ------> FrontController ------> Controller ------> ViewTemplate ------> Web Browser
    -   Incoming requests comes to the FrontController from the WebBrowser
    -   FrontController will delegate the requests to the Controller
    -   Controller contains the business logic
    -   Then you pass it to the View Template which contains our html jsp page
    -   Then it renders the data on the jsp page and renders a response back it to the browser

Spring MVC Benifits
    -   The Spring way of building web app UIs in java
    -   Leverage a set of reusable UI components
    -   Help manage application state for web requests
    -   Process form data: validation, conversion etc
    -   Flexible configuration for the view layer

Components of Spring MVC Application
    -   A set of web pages to layout UI components
    -   A collection of spring beans(controllers, services, etc)
    -   Spring configuration(XML, Annotations or Java)

Spring MVC Front Controller
    -   Front Controller known as DispatcherServlet
    -   You will create
        -   Model objects
            -   these contains data
        -   View template
            -   These are the JSP pages or view page to render the data
        -   Controller classes
            -   Business logic or processing logic

Detail Note on Model, View and Controller
    Controller
        -   Code created by developer
        -   Contains your business logic
            -   Handle Requests
            -   Store/ retrieve data
            -   Place data in Model objects
        -   Send back to the appropriate View Template

    Model
        -   Model contains the data
        -   Store/retrieve data via backend systems
            -   database, webservice, etc ...
            -   Use a Spring bean if you like
        -   Place your data in the model
            -   Data can be any Java object/collection

    View Template
        -   Spring MVC is flexible
            -   Supports many view templates
        -   Most common is JSP + JSTL
            -   Model data comes to your View Template and then JSP can read that model data and display it
            -   For eg: if you have list of students then your JSP page can create a table to display that students list
        -   Developer creates page
            -   Displays data

Steps for Configuring Spring MVC configuration:
    -   Step 1 Configure Spring DispatcherServlet(web.xml)
        -   we need to add an entry for the spring dispatcher servlet or the Front Controller
        -   You add the name and the class for the spring dispatcher servlet
        -   spring dispatcher servlet is a part of core spring framework

        -   Once you have a servlet reference then you setup initial parameters
        -   you tell where your spring context configuration file is located

    -   Step 2 Setup the URL mappings to Spring MVC Dispatcher Servlet(web.xml)
        -   for any url pattern coming in for eg : "/", pass it to the dispatcher servlet

    -   Step 3 Add support for Spring component Scanning(spring-mvc-demo-servlet.xml)
        -   In this we add support for component scanning

    -   Step 4 Add support for conversion, formatting and validation(spring-mvc-demo-servlet.xml)
        -   conversions of form data, formatting of form data and validation of form data

    -   Step 5 Configure Spring MVC View Resolver(spring-mvc-demo-servlet.xml)
        -   how to display the page or where the page is located


MVC Configuration
    -   Window -> Perspective -> Open Perspective -> JavaEE
    -   Create new Dynamic Web Project and name it as spring-mvc-demo
    -   copy the jar files and paste in the lib folder
    -   add the web.xml and spring-mvc-demo-servlet.xml to the WEB-INF folder
    -   now in spring-mvc-demo-servlet.xml in Step 5 we don't have the "/WEB-INF/view" folder so we have to create it.

@Controller
    -   It is used for component scanning but for web requests
    -   It extends @Component, so it is also included in component scanning
    -   @RequestMapping is also to be added to a method which will return a view name
    -   for eg: @RequestMapping("/"), so when / is pressed or entered then a view name should be returned
        in the form of a jsp or something else.

How does Component Scan work Your Package names are different?
    -   Note our HomeController class is defined in com.luv2code.springdemo.mvc,
        but in spring-mvc-demo-servlet.xml we are defining the base package as
        com.luv2code.springdemo.
    -   So how does component scan work in this case?
    -   For the Spring attribute: base-package="com.luv2code.springdemo"
    -   Spring will recursively scan for components starting at the base package
        "com.luv2code.springdemo"
    -   Recursive means first it will look at the base package and scan all the
        sub packages.
    -   The package com.luv2code.springdemo.mvc is a sub package because of
        naming structure, just like folders on a file system.

Spring Model
    -   The model is the container for your application data
    -   In your Controller
        -   You can put anything in the model
        -   strings, objects info from database etc
    -   Your view JSP can access data from the model
    -   For eg: Model class is used to pass data between controllers and views

@RequestParam
    -   @RequestParam("studentName") is used to read form data and automatically bind it to a variable
    -   Earlier we were using HttpServletRequst class to fetch the variable

Adding Request Mappings to Controller
    -   Serves a parent mapping for controller
    -   All request mappings on methods in the controller are relative eg: if the requestMapping is on the class,
        then all the methods inside it are realtive to the class
    -   Similar to folder directory structures

Spring MVC Form Tags
    -   Spring MVC Form Tags are building block for a web page
    -   Form tags are configurable and reusable for a webpage

Data Binding
    -   Spring MVC Form Tags can make use of data binding
    -   Automatically setting/ retrieving data from a Java object / bean

Spring MVC Form Tags
    -   Form Tags           Description
        form:form           main from container
        form:input          text field
        form:textarea       multi-line text field
        form:checkbox       checkbox
        form:radiobutton    radio buttons
        form:select         drop down list
        more...

@ModelAttribute
    -   It is used to bind the parameter that is passed in
    -   For eg: @ModelAttribute("student") Student student, "student" attribute is being bind to Student student object
